# -*- coding: utf-8 -*-
import numpy as np

par = {}
parts = 10
par['pressure_time'] = {'Min': 0.0, 'Max': 100.0}
par['pressure_radius'] = {'Min': 0.0, 'Max': 5.0}
par['pressure_amplitude'] = {'Min': 0.0, 'Max': 200.0}
par['length'] = {'Min': 10.0, 'Max': 100.0}
par['diameter'] = {'Min': 0.01, 'Max': 0.5}
par['young'] = {'Min': 60.0, 'Max': 300.0}
par['density'] = {'Min': 1000.0, 'Max': 2000.0}
par['strength'] = {'Min': 0.2, 'Max': 10.0}

def get_list(Min, Max):
    return list(map(lambda x: round(x, 2), np.arange(Min, Max+0.01, (Max-Min)/(parts-1))))

with open('fib_all_data.txt', 'r') as f:
    data_is_broken = f.readlines()
data_is_broken = list(map(int, data_is_broken))

X, Y, Z = [], [], [[0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0]]

for i, val in enumerate(data_is_broken):
    Y.extend([i%2]*val)
n = list(range(10))
i = 0
for i0 in n:
    for i1 in n:
        for i2 in n:
            for i3 in n:
                for i4 in n:
                    for i5 in n:
                        for i6 in n:
                            for i7 in n:
                                if 0 not in [i4, i5, i6]:
                                    if 1 not in [i4, i5, i6]:
                                        if not Y[i]:
                                            Z[0][i0] += 1
                                            Z[1][i1] += 1
                                            Z[2][i2] += 1
                                            Z[3][i3] += 1
                                            Z[4][i4] += 1
                                            Z[5][i5] += 1
                                            Z[6][i6] += 1
                                            Z[7][i7] += 1
                                i += 1
    print(i0)
#print(Z)
for i in Z:
    print(i)
#if 0 not in [i4, i5, i6]:
'''
[628257, 678945, 824902, 925338, 994931, 1042670, 1071814, 1084694, 1086137, 1043621]
[0, 66239, 282384, 511505, 802996, 1044516, 1324464, 1546372, 1800194, 2002639]
[251349, 423058, 592117, 753547, 903348, 1044737, 1175826, 1297501, 1415316, 1524510]
[855603, 878366, 899561, 917688, 933501, 951156, 966229, 979622, 993652, 1005931]
[0, 1624452, 1294447, 1197040, 1090452, 990163, 903427, 826635, 757249, 697444]
[0, 3014387, 1774744, 1167163, 858667, 677944, 564480, 487964, 435318, 400642]
[0, 3805555, 2070060, 1226598, 778630, 521470, 365452, 265810, 198237, 149497]
[664, 354074, 701378, 912289, 1021141, 1125929, 1224553, 1300788, 1353084, 1387409]
'''

#if 0 not in [i4, i5, i6]:
#if 1 not in [i4, i5, i6]:
'''
[97754, 118853, 174406, 220524, 259608, 289614, 310918, 325289, 335175, 341405]
[0, 19, 14767, 52660, 127150, 211388, 332872, 443665, 584850, 706175]
[11048, 41421, 85346, 140272, 201399, 267425, 333822, 399001, 465164, 528648]
[212053, 221853, 230642, 238358, 245567, 252828, 259521, 265207, 271131, 276386]
[0, 0, 500821, 440091, 372451, 313865, 265525, 225623, 191446, 163724]
[0, 0, 1015077, 543068, 325507, 208702, 142485, 101086, 76146, 61475]
[0, 0, 1202441, 585867, 306477, 170561, 98517, 57112, 33367, 19204]
[0, 34506, 119682, 191672, 239909, 294498, 347716, 389429, 418270, 437864]
'''

