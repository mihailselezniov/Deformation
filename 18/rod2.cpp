#include <iostream>
#include <fstream>
#include <vector>
#include <cmath>

using namespace std;

class Rod {
private:
    double E;
    double rho;
    double S;
    double L;
    double pLimit;
    double dLimit;

    vector<double> x;
    vector<double> v;
    double m;
    double h;

    double max_global_eps;
    double max_local_eps;
    bool is_damaged;

public:
    Rod(double E, double rho, double S, double L, double pLimit, double dLimit)
        : E(E), rho(rho), S(S), L(L), pLimit(pLimit), dLimit(dLimit) {
    }

    void mesh(unsigned int n) {
        x.resize(n + 1);
        v.resize(n + 1);

        m = S * L * rho / n;
        h = L / n;

        for(unsigned int i = 0; i <= n; ++i) {
            x[i] = -L + i * h;
        }

        max_global_eps = 0;
        max_local_eps = 0;
        is_damaged = false;
    }

    void strike(double V) {

        for(unsigned int i = 0; i < x.size(); i++) {
            v[i] = V;
        }

        double c = sqrt(E/rho);
        double tau = 0.95 * h / c;
        double maxT = 2 * L / c;
        double T = 0;

        while (T < maxT) {
            for(unsigned int i = 0; i < x.size(); i++) {
                double eps_l = i > 0 ? (x[i] - x[i-1] - h) / h : 0;
                double eps_r = i < x.size() - 1 ? (x[i+1] - x[i] - h) / h : 0;

                double local_eps = max(abs(eps_l), abs(eps_r));
                max_local_eps = max(max_local_eps, local_eps);
                if(local_eps * E > dLimit) {
                    is_damaged = true;
                }

                double F = (-eps_l + eps_r) * E * S;

                double a = F / m;
                v[i] += a * tau;
                if((i == x.size() - 1) && v[i] > 0 ) {
                    v[i] = 0;
                }
            }

            for(unsigned int i = 0; i < x.size(); i++) {
                x[i] += v[i] * tau;
            }

            T += tau;
            max_global_eps = max(max_global_eps, abs(x[x.size() - 1] - x[0] - L) / L);

            //cout << "T = " << T << " L = " << (x[x.size() - 1] - x[0]) << " eps = " << max_global_eps  << endl;
        }
    }

    bool damaged() const {
        return is_damaged;
    }

    double max_eps() const {
        return max_global_eps;
    }
};

const int limit = 100000;
const double e0[] = {50000000000.0, 53535353535.35354, 57070707070.70708, 60606060606.060616, 64141414141.414154, 67676767676.76769, 71212121212.12123, 74747474747.47476, 78282828282.82831, 81818181818.18185, 85353535353.53539, 88888888888.88892, 92424242424.24246, 95959595959.59602, 99494949494.94954, 103030303030.30307, 106565656565.65663, 110101010101.01016, 113636363636.3637, 117171717171.71724, 120707070707.07077, 124242424242.42432, 127777777777.77785, 131313131313.13138, 134848484848.48492, 138383838383.83847, 141919191919.19202, 145454545454.54553, 148989898989.89908, 152525252525.25266, 156060606060.60614, 159595959595.9597, 163131313131.31326, 166666666666.66678, 170202020202.02032, 173737373737.37387, 177272727272.7274, 180808080808.08093, 184343434343.43448, 187878787878.788, 191414141414.14154, 194949494949.4951, 198484848484.84863, 202020202020.20215, 205555555555.5557, 209090909090.90924, 212626262626.26276, 216161616161.6163, 219696969696.96985, 223232323232.3234, 226767676767.67694, 230303030303.03046, 233838383838.384, 237373737373.73755, 240909090909.09106, 244444444444.4446, 247979797979.79816, 251515151515.1517, 255050505050.50525, 258585858585.85876, 262121212121.2123, 265656565656.56586, 269191919191.91937, 272727272727.27292, 276262626262.62646, 279797979797.98, 283333333333.33356, 286868686868.6871, 290404040404.04065, 293939393939.39417, 297474747474.74774, 301010101010.1012, 304545454545.4548, 308080808080.80835, 311616161616.16187, 315151515151.5154, 318686868686.86896, 322222222222.2225, 325757575757.576, 329292929292.92957, 332828282828.2831, 336363636363.6366, 339898989898.9902, 343434343434.3437, 346969696969.69727, 350505050505.0508, 354040404040.4043, 357575757575.7579, 361111111111.1114, 364646464646.4649, 368181818181.8185, 371717171717.172, 375252525252.5255, 378787878787.8791, 382323232323.2326, 385858585858.5862, 389393939393.9397, 392929292929.2932, 396464646464.6468, 400000000000.0003};
const double e1[] = {1500.0, 1575.757576, 1651.515152, 1727.272727, 1803.030303, 1878.787879, 1954.545455, 2030.30303, 2106.060606, 2181.818182, 2257.575758, 2333.333333, 2409.090909, 2484.848485, 2560.606061, 2636.363636, 2712.121212, 2787.878788, 2863.636364, 2939.393939, 3015.151515, 3090.909091, 3166.666667, 3242.424242, 3318.181818, 3393.939394, 3469.69697, 3545.454545, 3621.212121, 3696.969697, 3772.727273, 3848.484848, 3924.242424, 4000.0, 4075.757576, 4151.515152, 4227.272727, 4303.030303, 4378.787879, 4454.545455, 4530.30303, 4606.060606, 4681.818182, 4757.575758, 4833.333333, 4909.090909, 4984.848485, 5060.606061, 5136.363636, 5212.121212, 5287.878788, 5363.636364, 5439.393939, 5515.151515, 5590.909091, 5666.666667, 5742.424242, 5818.181818, 5893.939394, 5969.69697, 6045.454545, 6121.212121, 6196.969697, 6272.727273, 6348.484848, 6424.242424, 6500.0, 6575.757576, 6651.515152, 6727.272727, 6803.030303, 6878.787879, 6954.545455, 7030.30303, 7106.060606, 7181.818182, 7257.575758, 7333.333333, 7409.090909, 7484.848485, 7560.606061, 7636.363636, 7712.121212, 7787.878788, 7863.636364, 7939.393939, 8015.151515, 8090.909091, 8166.666667, 8242.424242, 8318.181818, 8393.939394, 8469.69697, 8545.454545, 8621.212121, 8696.969697, 8772.727273, 8848.484848, 8924.242424, 9000.0};
const double e2[] = {50000000.0, 53535353.535354, 57070707.070707, 60606060.606061, 64141414.141414, 67676767.676768, 71212121.212121, 74747474.747475, 78282828.282828, 81818181.818182, 85353535.353535, 88888888.888889, 92424242.424242, 95959595.959596, 99494949.494949, 103030303.030303, 106565656.565657, 110101010.10101, 113636363.636364, 117171717.171717, 120707070.707071, 124242424.242424, 127777777.777778, 131313131.313131, 134848484.848485, 138383838.383838, 141919191.919192, 145454545.454545, 148989898.989899, 152525252.525252, 156060606.060606, 159595959.59596, 163131313.131313, 166666666.666667, 170202020.20202, 173737373.737374, 177272727.272727, 180808080.808081, 184343434.343434, 187878787.878788, 191414141.414141, 194949494.949495, 198484848.484848, 202020202.020202, 205555555.555556, 209090909.090909, 212626262.626263, 216161616.161616, 219696969.69697, 223232323.232323, 226767676.767677, 230303030.30303, 233838383.838384, 237373737.373737, 240909090.909091, 244444444.444444, 247979797.979798, 251515151.515151, 255050505.050505, 258585858.585858, 262121212.121212, 265656565.656566, 269191919.191919, 272727272.727273, 276262626.262626, 279797979.79798, 283333333.333333, 286868686.868687, 290404040.40404, 293939393.939394, 297474747.474747, 301010101.010101, 304545454.545454, 308080808.080808, 311616161.616162, 315151515.151515, 318686868.686869, 322222222.222222, 325757575.757576, 329292929.292929, 332828282.828283, 336363636.363636, 339898989.89899, 343434343.434343, 346969696.969697, 350505050.50505, 354040404.040404, 357575757.575757, 361111111.111111, 364646464.646464, 368181818.181818, 371717171.717172, 375252525.252525, 378787878.787879, 382323232.323232, 385858585.858586, 389393939.393939, 392929292.929293, 396464646.464646, 400000000.0};
const double e3[] = {1.0, 1.090909, 1.181818, 1.272727, 1.363636, 1.454545, 1.545455, 1.636364, 1.727273, 1.818182, 1.909091, 2.0, 2.090909, 2.181818, 2.272727, 2.363636, 2.454545, 2.545455, 2.636364, 2.727273, 2.818182, 2.909091, 3.0, 3.090909, 3.181818, 3.272727, 3.363636, 3.454545, 3.545455, 3.636364, 3.727273, 3.818182, 3.909091, 4.0, 4.090909, 4.181818, 4.272727, 4.363636, 4.454545, 4.545455, 4.636364, 4.727273, 4.818182, 4.909091, 5.0, 5.090909, 5.181818, 5.272727, 5.363636, 5.454545, 5.545455, 5.636364, 5.727273, 5.818182, 5.909091, 6.0, 6.090909, 6.181818, 6.272727, 6.363636, 6.454545, 6.545455, 6.636364, 6.727273, 6.818182, 6.909091, 7.0, 7.090909, 7.181818, 7.272727, 7.363636, 7.454545, 7.545455, 7.636364, 7.727273, 7.818182, 7.909091, 8.0, 8.090909, 8.181818, 8.272727, 8.363636, 8.454545, 8.545455, 8.636364, 8.727273, 8.818182, 8.909091, 9.0, 9.090909, 9.181818, 9.272727, 9.363636, 9.454545, 9.545455, 9.636364, 9.727273, 9.818182, 9.909091, 10.0};

int main(int argc, char* argv[]) {
    int arg = stoi(argv[1]);
    ofstream out(to_string(arg)+".txt");

    char damaged[1000000];

    int ie = 0;
    for (int ie0 = 0; ie0 < 100; ie0++) {
        for (int ie1 = 0; ie1 < 100; ie1++) {
            for (int ie2 = 0; ie2 < 100; ie2++) {
                for (int ie3 = arg-1; ie3 < arg; ie3++) {
                    Rod r(e0[ie0] /*0.5e11 4e11*/, e1[ie1] /*1500 9000*/, 1e-4, 1.0, 2.5e8, e2[ie2] /*0.5e8 4e8*/);
                    r.mesh(100);
                    r.strike(e3[ie3]);
                    damaged[ie] = r.damaged() ? '1' : '0';;
                    ie++;
                }
            }
        }
    }

    //cout << ie;
    cout << arg;
    out.write((char *)damaged, sizeof(damaged));
    out.close();

    //for (int i = 0; i < limit; i++) {
        //Rod r(4e11 /*0.5e11 4e11*/, 9000 /*1500 9000*/, 1e-4, 1.0, 2.5e8, 0.5e8 /*0.5e8 4e8*/);
        //r.mesh(100);
        //r.strike(10); // 1-10
        //cout << boolalpha << "Is damaged: " << r.damaged() << " Max eps: " << r.max_eps() << endl;
    //}
    
    return 0;
}