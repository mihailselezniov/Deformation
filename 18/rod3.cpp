#include <iostream>
#include <vector>
#include <cmath>

using namespace std;

class Rod {
private:
    double E;
    double rho;
    double S;
    double L;
    double pLimit;
    double dLimit;

    vector<double> x;
    vector<double> v;
    double m;
    double h;

    double max_global_eps;
    double max_local_eps;
    bool is_damaged;

public:
    Rod(double E, double rho, double S, double L, double pLimit, double dLimit)
        : E(E), rho(rho), S(S), L(L), pLimit(pLimit), dLimit(dLimit) {
    }

    void mesh(unsigned int n) {
        x.resize(n + 1);
        v.resize(n + 1);

        m = S * L * rho / n;
        h = L / n;

        for(unsigned int i = 0; i <= n; ++i) {
            x[i] = -L + i * h;
        }

        max_global_eps = 0;
        max_local_eps = 0;
        is_damaged = false;
    }

    void strike(double V) {

        for(unsigned int i = 0; i < x.size(); i++) {
            v[i] = V;
        }

        double c = sqrt(E/rho);
        double tau = 0.95 * h / c;
        double maxT = 2 * L / c;
        double T = 0;

        while (T < maxT) {
            for(unsigned int i = 0; i < x.size(); i++) {
                double eps_l = i > 0 ? (x[i] - x[i-1] - h) / h : 0;
                double eps_r = i < x.size() - 1 ? (x[i+1] - x[i] - h) / h : 0;

                double local_eps = max(abs(eps_l), abs(eps_r));
                max_local_eps = max(max_local_eps, local_eps);
                if(local_eps * E > dLimit) {
                    is_damaged = true;
                }

                double F = (-eps_l + eps_r) * E * S;

                double a = F / m;
                v[i] += a * tau;
                if((i == x.size() - 1) && v[i] > 0 ) {
                    v[i] = 0;
                }
            }

            for(unsigned int i = 0; i < x.size(); i++) {
                x[i] += v[i] * tau;
            }

            T += tau;
            max_global_eps = max(max_global_eps, abs(x[x.size() - 1] - x[0] - L) / L);

            //cout << "T = " << T << " L = " << (x[x.size() - 1] - x[0]) << " eps = " << max_global_eps  << endl;
        }
    }

    bool damaged() const {
        return is_damaged;
    }

    double max_eps() const {
        return max_global_eps;
    }
};

const double e0[] = {51767676767.676765, 55303030303.0303, 58838383838.38383, 62373737373.73736, 65909090909.09089, 69444444444.44443, 72979797979.79794, 76515151515.15149, 80050505050.505, 83585858585.85855, 87121212121.21207, 90656565656.56561, 94191919191.91913, 97727272727.27267, 101262626262.62619, 104797979797.97975, 108333333333.33325, 111868686868.6868, 115404040404.04031, 118939393939.39386, 122474747474.74738, 126010101010.10092, 129545454545.45444, 133080808080.80798, 136616161616.1615, 140151515151.51505, 143686868686.86856, 147222222222.2221, 150757575757.57562, 154292929292.9292, 157828282828.28268, 161363636363.63623, 164898989898.98975, 168434343434.3433, 171969696969.6968, 175505050505.05035, 179040404040.40387, 182575757575.75742, 186111111111.11093, 189646464646.46448, 193181818181.818, 196717171717.17154, 200252525252.52505, 203787878787.8786, 207323232323.23212, 210858585858.58566, 214393939393.93918, 217929292929.29272, 221464646464.64624, 224999999999.9998, 228535353535.3533, 232070707070.70685, 235606060606.06036, 239141414141.4139, 242676767676.76743, 246212121212.12097, 249747474747.4745, 253282828282.82803, 256818181818.18155, 260353535353.5351, 263888888888.8886, 267424242424.24216, 270959595959.59567, 274494949494.94922, 278030303030.30273, 281565656565.65625, 285101010101.00977, 288636363636.36334, 292171717171.71686, 295707070707.07043, 299242424242.42395, 302777777777.77747, 306313131313.131, 309848484848.4845, 313383838383.838, 316919191919.1916, 320454545454.5451, 323989898989.8987, 327525252525.2522, 331060606060.6057, 334595959595.9592, 338131313131.31274, 341666666666.6663, 345202020202.01984, 348737373737.37335, 352272727272.72687, 355808080808.08044, 359343434343.43396, 362878787878.7875, 366414141414.141, 369949494949.49457, 373484848484.8481, 377020202020.2016, 380555555555.5551, 384090909090.9087, 387626262626.2622, 391161616161.6157, 394696969696.96924, 398232323232.3228};
const double e1[] = {1537.878788, 1613.636364, 1689.393939, 1765.151515, 1840.909091, 1916.666667, 1992.424242, 2068.181818, 2143.939394, 2219.69697, 2295.454545, 2371.212121, 2446.969697, 2522.727273, 2598.484848, 2674.242424, 2750.0, 2825.757576, 2901.515152, 2977.272727, 3053.030303, 3128.787879, 3204.545455, 3280.30303, 3356.060606, 3431.818182, 3507.575758, 3583.333333, 3659.090909, 3734.848485, 3810.606061, 3886.363636, 3962.121212, 4037.878788, 4113.636364, 4189.393939, 4265.151515, 4340.909091, 4416.666667, 4492.424242, 4568.181818, 4643.939394, 4719.69697, 4795.454545, 4871.212121, 4946.969697, 5022.727273, 5098.484848, 5174.242424, 5250.0, 5325.757576, 5401.515152, 5477.272727, 5553.030303, 5628.787879, 5704.545455, 5780.30303, 5856.060606, 5931.818182, 6007.575758, 6083.333333, 6159.090909, 6234.848485, 6310.606061, 6386.363636, 6462.121212, 6537.878788, 6613.636364, 6689.393939, 6765.151515, 6840.909091, 6916.666667, 6992.424242, 7068.181818, 7143.939394, 7219.69697, 7295.454545, 7371.212121, 7446.969697, 7522.727273, 7598.484848, 7674.242424, 7750.0, 7825.757576, 7901.515152, 7977.272727, 8053.030303, 8128.787879, 8204.545455, 8280.30303, 8356.060606, 8431.818182, 8507.575758, 8583.333333, 8659.090909, 8734.848485, 8810.606061, 8886.363636, 8962.121212};
const double e2[] = {51767676.767677, 55303030.30303, 58838383.838384, 62373737.373737, 65909090.909091, 69444444.444444, 72979797.979798, 76515151.515152, 80050505.050505, 83585858.585859, 87121212.121212, 90656565.656566, 94191919.191919, 97727272.727273, 101262626.262626, 104797979.79798, 108333333.333333, 111868686.868687, 115404040.404041, 118939393.939394, 122474747.474748, 126010101.010101, 129545454.545455, 133080808.080808, 136616161.616162, 140151515.151515, 143686868.686869, 147222222.222222, 150757575.757576, 154292929.292929, 157828282.828283, 161363636.363637, 164898989.89899, 168434343.434344, 171969696.969697, 175505050.505051, 179040404.040404, 182575757.575758, 186111111.111111, 189646464.646465, 193181818.181818, 196717171.717172, 200252525.252526, 203787878.787879, 207323232.323233, 210858585.858586, 214393939.39394, 217929292.929293, 221464646.464647, 225000000.0, 228535353.535354, 232070707.070707, 235606060.606061, 239141414.141414, 242676767.676768, 246212121.212122, 249747474.747475, 253282828.282829, 256818181.818182, 260353535.353536, 263888888.888889, 267424242.424243, 270959595.959596, 274494949.49495, 278030303.030303, 281565656.565657, 285101010.10101, 288636363.636364, 292171717.171718, 295707070.707071, 299242424.242425, 302777777.777778, 306313131.313132, 309848484.848485, 313383838.383839, 316919191.919192, 320454545.454546, 323989898.989899, 327525252.525253, 331060606.060607, 334595959.59596, 338131313.131314, 341666666.666667, 345202020.202021, 348737373.737374, 352272727.272728, 355808080.808081, 359343434.343435, 362878787.878788, 366414141.414142, 369949494.949496, 373484848.484849, 377020202.020203, 380555555.555556, 384090909.09091, 387626262.626263, 391161616.161617, 394696969.69697, 398232323.232324};
const double e3[] = {1.045455, 1.136364, 1.227273, 1.318182, 1.409091, 1.5, 1.590909, 1.681818, 1.772727, 1.863636, 1.954545, 2.045455, 2.136364, 2.227273, 2.318182, 2.409091, 2.5, 2.590909, 2.681818, 2.772727, 2.863636, 2.954545, 3.045455, 3.136364, 3.227273, 3.318182, 3.409091, 3.5, 3.590909, 3.681818, 3.772727, 3.863636, 3.954545, 4.045455, 4.136364, 4.227273, 4.318182, 4.409091, 4.5, 4.590909, 4.681818, 4.772727, 4.863636, 4.954545, 5.045455, 5.136364, 5.227273, 5.318182, 5.409091, 5.5, 5.590909, 5.681818, 5.772727, 5.863636, 5.954545, 6.045455, 6.136364, 6.227273, 6.318182, 6.409091, 6.5, 6.590909, 6.681818, 6.772727, 6.863636, 6.954545, 7.045455, 7.136364, 7.227273, 7.318182, 7.409091, 7.5, 7.590909, 7.681818, 7.772727, 7.863636, 7.954545, 8.045455, 8.136364, 8.227273, 8.318182, 8.409091, 8.5, 8.590909, 8.681818, 8.772727, 8.863636, 8.954545, 9.045455, 9.136364, 9.227273, 9.318182, 9.409091, 9.5, 9.590909, 9.681818, 9.772727, 9.863636, 9.954545};

int main(int argc, char* argv[]) {
    int ie0 = stoi(argv[1]);
    int ie1 = stoi(argv[2]);
    int ie2 = stoi(argv[3]);
    int ie3 = stoi(argv[4]);
    //cout << ie0 << ie1 << ie2 << ie3;

    Rod r(e0[ie0] /*0.5e11 4e11*/, e1[ie1] /*1500 9000*/, 1e-4, 1.0, 2.5e8, e2[ie2] /*0.5e8 4e8*/);
    r.mesh(100);
    r.strike(e3[ie3]);
    cout << r.damaged();


    return 0;
}