# -*- coding: utf-8 -*-
import numpy as np
from sklearn import preprocessing
from sklearn.model_selection import train_test_split
from sklearn.metrics import accuracy_score, confusion_matrix, classification_report, roc_auc_score, average_precision_score
from sklearn.neighbors import KNeighborsClassifier
from sklearn.externals import joblib
import collections


par = {}
parts = 10
par['pressure_time'] = {'Min': 0.0, 'Max': 100.0}
par['pressure_radius'] = {'Min': 0.0, 'Max': 5.0}
par['pressure_amplitude'] = {'Min': 0.0, 'Max': 200.0}
par['length'] = {'Min': 10.0, 'Max': 100.0}
par['diameter'] = {'Min': 0.01, 'Max': 0.5}
par['young'] = {'Min': 60.0, 'Max': 300.0}
par['density'] = {'Min': 1000.0, 'Max': 2000.0}
par['strength'] = {'Min': 0.2, 'Max': 10.0}

def get_list(Min, Max):
    return list(map(lambda x: round(x, 2), np.arange(Min, Max+0.01, (Max-Min)/(parts-1))))


print(get_list(**par['length']))
print(get_list(**par['diameter']))
print(get_list(**par['young']))
print(get_list(**par['density']))
print(get_list(**par['pressure_time']))
print(get_list(**par['pressure_radius']))
print(get_list(**par['pressure_amplitude']))
print(get_list(**par['strength']))


with open('../11/fib_all_data.txt', 'r') as f:
    data_is_broken = f.readlines()
data_is_broken = list(map(int, data_is_broken))

def make_str(data):
    return ''.join(map(str, data))

X, Y = [], []
for i, val in enumerate(data_is_broken):
    Y.extend([i%2]*val)

n = tuple(map(float, range(10)))
i = 0
y_ = []
a = np.empty((0,8), dtype=np.float64)
for i0 in n:
    for i1 in n:
        for i2 in n:
            for i3 in n:
                for i4 in n:
                    for i5 in n:
                        for i6 in n:
                            for i7 in n:
                                if 0 not in [i4, i5, i6]:
                                    X.append([i0, i1, i2, i3, i4, i5, i6, i7])
                                    y_.append(Y[i])
                                i += 1
    a = np.append(a, np.array(X), axis=0)
    X = []
    print(i0)

X, Y = a, np.array(y_)

print('\n', '-'*10, 'index', '-'*10)
for i in range(20):
    print(X[i])

#X = preprocessing.normalize(X)
X = (X - X.min()) / (X.max() - X.min())
print('\n', '-'*10, 'index + normalize', '-'*10)
for i in range(20):
    print(X[i])



'''
X, Y = [], []
for i, val in enumerate(data_is_broken):
    Y.extend([i%2]*val)

n = tuple(map(float, range(10)))
i = 0
y_ = []
a = np.empty((0,8), dtype=np.float64)
for i0, l in enumerate(get_list(**par['length'])):
    for i1, di in enumerate(get_list(**par['diameter'])):
        for i2, y in enumerate(get_list(**par['young'])):
            for i3, de in enumerate(get_list(**par['density'])):
                for i4, pt in enumerate(get_list(**par['pressure_time'])):
                    for i5, pr in enumerate(get_list(**par['pressure_radius'])):
                        for i6, pa in enumerate(get_list(**par['pressure_amplitude'])):
                            for i7, s in enumerate(get_list(**par['strength'])):
                                if 0 not in [i4, i5, i6]:
                                    X.append([l, di, y, de, pt, pr, pa, s])
                                    y_.append(Y[i])
                                i += 1
    a = np.append(a, np.array(X), axis=0)
    X = []
    print(i0)
    #break

X, Y = a, np.array(y_)

print('\n', '-'*10, 'data', '-'*10)
for i in range(20):
    print(X[i])

X = preprocessing.normalize(X)
print('\n', '-'*10, 'data + normalize', '-'*10)
for i in range(20):
    print(X[i])
'''






'''
[10.0, 20.0, 30.0, 40.0, 50.0, 60.0, 70.0, 80.0, 90.0, 100.0]
[0.01, 0.06, 0.12, 0.17, 0.23, 0.28, 0.34, 0.39, 0.45, 0.5]
[60.0, 86.67, 113.33, 140.0, 166.67, 193.33, 220.0, 246.67, 273.33, 300.0]
[1000.0, 1111.11, 1222.22, 1333.33, 1444.44, 1555.56, 1666.67, 1777.78, 1888.89, 2000.0]
[0.0, 11.11, 22.22, 33.33, 44.44, 55.56, 66.67, 77.78, 88.89, 100.0]
[0.0, 0.56, 1.11, 1.67, 2.22, 2.78, 3.33, 3.89, 4.44, 5.0]
[0.0, 22.22, 44.44, 66.67, 88.89, 111.11, 133.33, 155.56, 177.78, 200.0]
[0.2, 1.29, 2.38, 3.47, 4.56, 5.64, 6.73, 7.82, 8.91, 10.0]
0.0
1.0
2.0
3.0
4.0
5.0
6.0
7.0
8.0
9.0

 ---------- index ----------
[0. 0. 0. 0. 1. 1. 1. 0.]
[0. 0. 0. 0. 1. 1. 1. 1.]
[0. 0. 0. 0. 1. 1. 1. 2.]
[0. 0. 0. 0. 1. 1. 1. 3.]
[0. 0. 0. 0. 1. 1. 1. 4.]
[0. 0. 0. 0. 1. 1. 1. 5.]
[0. 0. 0. 0. 1. 1. 1. 6.]
[0. 0. 0. 0. 1. 1. 1. 7.]
[0. 0. 0. 0. 1. 1. 1. 8.]
[0. 0. 0. 0. 1. 1. 1. 9.]
[0. 0. 0. 0. 1. 1. 2. 0.]
[0. 0. 0. 0. 1. 1. 2. 1.]
[0. 0. 0. 0. 1. 1. 2. 2.]
[0. 0. 0. 0. 1. 1. 2. 3.]
[0. 0. 0. 0. 1. 1. 2. 4.]
[0. 0. 0. 0. 1. 1. 2. 5.]
[0. 0. 0. 0. 1. 1. 2. 6.]
[0. 0. 0. 0. 1. 1. 2. 7.]
[0. 0. 0. 0. 1. 1. 2. 8.]
[0. 0. 0. 0. 1. 1. 2. 9.]

 ---------- index + normalize ----------
[0.         0.         0.         0.         0.57735027 0.57735027
 0.57735027 0.        ]
[0.  0.  0.  0.  0.5 0.5 0.5 0.5]
[0.         0.         0.         0.         0.37796447 0.37796447
 0.37796447 0.75592895]
[0.         0.         0.         0.         0.28867513 0.28867513
 0.28867513 0.8660254 ]
[0.         0.         0.         0.         0.22941573 0.22941573
 0.22941573 0.91766294]
[0.         0.         0.         0.         0.18898224 0.18898224
 0.18898224 0.94491118]
[0.         0.         0.         0.         0.16012815 0.16012815
 0.16012815 0.96076892]
[0.         0.         0.         0.         0.13867505 0.13867505
 0.13867505 0.97072534]
[0.         0.         0.         0.         0.12216944 0.12216944
 0.12216944 0.97735555]
[0.         0.         0.         0.         0.10910895 0.10910895
 0.10910895 0.98198051]
[0.         0.         0.         0.         0.40824829 0.40824829
 0.81649658 0.        ]
[0.         0.         0.         0.         0.37796447 0.37796447
 0.75592895 0.37796447]
[0.         0.         0.         0.         0.31622777 0.31622777
 0.63245553 0.63245553]
[0.         0.         0.         0.         0.25819889 0.25819889
 0.51639778 0.77459667]
[0.         0.         0.         0.         0.21320072 0.21320072
 0.42640143 0.85280287]
[0.         0.         0.         0.         0.1796053  0.1796053
 0.3592106  0.89802651]
[0.         0.         0.         0.         0.15430335 0.15430335
 0.3086067  0.9258201 ]
[0.         0.         0.         0.         0.13483997 0.13483997
 0.26967994 0.94387981]
[0.         0.         0.         0.         0.11952286 0.11952286
 0.23904572 0.95618289]
[0.         0.         0.         0.         0.10721125 0.10721125
 0.21442251 0.96490128]
0
1
2
3
4
5
6
7
8
9

 ---------- data ----------
[1.000e+01 1.000e-02 6.000e+01 1.000e+03 1.111e+01 5.600e-01 2.222e+01
 2.000e-01]
[1.000e+01 1.000e-02 6.000e+01 1.000e+03 1.111e+01 5.600e-01 2.222e+01
 1.290e+00]
[1.000e+01 1.000e-02 6.000e+01 1.000e+03 1.111e+01 5.600e-01 2.222e+01
 2.380e+00]
[1.000e+01 1.000e-02 6.000e+01 1.000e+03 1.111e+01 5.600e-01 2.222e+01
 3.470e+00]
[1.000e+01 1.000e-02 6.000e+01 1.000e+03 1.111e+01 5.600e-01 2.222e+01
 4.560e+00]
[1.000e+01 1.000e-02 6.000e+01 1.000e+03 1.111e+01 5.600e-01 2.222e+01
 5.640e+00]
[1.000e+01 1.000e-02 6.000e+01 1.000e+03 1.111e+01 5.600e-01 2.222e+01
 6.730e+00]
[1.000e+01 1.000e-02 6.000e+01 1.000e+03 1.111e+01 5.600e-01 2.222e+01
 7.820e+00]
[1.000e+01 1.000e-02 6.000e+01 1.000e+03 1.111e+01 5.600e-01 2.222e+01
 8.910e+00]
[1.000e+01 1.000e-02 6.000e+01 1.000e+03 1.111e+01 5.600e-01 2.222e+01
 1.000e+01]
[1.000e+01 1.000e-02 6.000e+01 1.000e+03 1.111e+01 5.600e-01 4.444e+01
 2.000e-01]
[1.000e+01 1.000e-02 6.000e+01 1.000e+03 1.111e+01 5.600e-01 4.444e+01
 1.290e+00]
[1.000e+01 1.000e-02 6.000e+01 1.000e+03 1.111e+01 5.600e-01 4.444e+01
 2.380e+00]
[1.000e+01 1.000e-02 6.000e+01 1.000e+03 1.111e+01 5.600e-01 4.444e+01
 3.470e+00]
[1.000e+01 1.000e-02 6.000e+01 1.000e+03 1.111e+01 5.600e-01 4.444e+01
 4.560e+00]
[1.000e+01 1.000e-02 6.000e+01 1.000e+03 1.111e+01 5.600e-01 4.444e+01
 5.640e+00]
[1.000e+01 1.000e-02 6.000e+01 1.000e+03 1.111e+01 5.600e-01 4.444e+01
 6.730e+00]
[1.000e+01 1.000e-02 6.000e+01 1.000e+03 1.111e+01 5.600e-01 4.444e+01
 7.820e+00]
[1.000e+01 1.000e-02 6.000e+01 1.000e+03 1.111e+01 5.600e-01 4.444e+01
 8.910e+00]
[1.000e+01 1.000e-02 6.000e+01 1.000e+03 1.111e+01 5.600e-01 4.444e+01
 1.000e+01]

 ---------- data + normalize ----------
[9.97848208e-03 9.97848208e-06 5.98708925e-02 9.97848208e-01
 1.10860936e-02 5.58794997e-04 2.21721872e-02 1.99569642e-04]
[9.97847401e-03 9.97847401e-06 5.98708441e-02 9.97847401e-01
 1.10860846e-02 5.58794545e-04 2.21721693e-02 1.28722315e-03]
[9.97845414e-03 9.97845414e-06 5.98707248e-02 9.97845414e-01
 1.10860626e-02 5.58793432e-04 2.21721251e-02 2.37487209e-03]
[9.97842246e-03 9.97842246e-06 5.98705348e-02 9.97842246e-01
 1.10860274e-02 5.58791658e-04 2.21720547e-02 3.46251260e-03]
[9.97837898e-03 9.97837898e-06 5.98702739e-02 9.97837898e-01
 1.10859791e-02 5.58789223e-04 2.21719581e-02 4.55014082e-03]
[9.97832426e-03 9.97832426e-06 5.98699456e-02 9.97832426e-01
 1.10859183e-02 5.58786159e-04 2.21718365e-02 5.62777488e-03]
[9.97825728e-03 9.97825728e-06 5.98695437e-02 9.97825728e-01
 1.10858438e-02 5.58782408e-04 2.21716877e-02 6.71536715e-03]
[9.97817850e-03 9.97817850e-06 5.98690710e-02 9.97817850e-01
 1.10857563e-02 5.58777996e-04 2.21715126e-02 7.80293559e-03]
[9.97808792e-03 9.97808792e-06 5.98685275e-02 9.97808792e-01
 1.10856557e-02 5.58772924e-04 2.21713114e-02 8.89047634e-03]
[9.97798554e-03 9.97798554e-06 5.98679132e-02 9.97798554e-01
 1.10855419e-02 5.58767190e-04 2.21710839e-02 9.97798554e-03]
[9.97113199e-03 9.97113199e-06 5.98267919e-02 9.97113199e-01
 1.10779276e-02 5.58383391e-04 4.43117106e-02 1.99422640e-04]
[9.97112394e-03 9.97112394e-06 5.98267436e-02 9.97112394e-01
 1.10779187e-02 5.58382941e-04 4.43116748e-02 1.28627499e-03]
[9.97110411e-03 9.97110411e-06 5.98266247e-02 9.97110411e-01
 1.10778967e-02 5.58381830e-04 4.43115867e-02 2.37312278e-03]
[9.97107250e-03 9.97107250e-06 5.98264350e-02 9.97107250e-01
 1.10778616e-02 5.58380060e-04 4.43114462e-02 3.45996216e-03]
[9.97102912e-03 9.97102912e-06 5.98261747e-02 9.97102912e-01
 1.10778134e-02 5.58377631e-04 4.43112534e-02 4.54678928e-03]
[9.97097452e-03 9.97097452e-06 5.98258471e-02 9.97097452e-01
 1.10777527e-02 5.58374573e-04 4.43110108e-02 5.62362963e-03]
[9.97090769e-03 9.97090769e-06 5.98254461e-02 9.97090769e-01
 1.10776784e-02 5.58370830e-04 4.43107138e-02 6.71042087e-03]
[9.97082908e-03 9.97082908e-06 5.98249745e-02 9.97082908e-01
 1.10775911e-02 5.58366429e-04 4.43103644e-02 7.79718834e-03]
[9.97073870e-03 9.97073870e-06 5.98244322e-02 9.97073870e-01
 1.10774907e-02 5.58361367e-04 4.43099628e-02 8.88392818e-03]
[9.97063654e-03 9.97063654e-06 5.98238193e-02 9.97063654e-01
 1.10773772e-02 5.58355646e-04 4.43095088e-02 9.97063654e-03]
'''


